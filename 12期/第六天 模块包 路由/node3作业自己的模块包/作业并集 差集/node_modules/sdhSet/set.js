/**
 * Created by Administrator on 2016/11/7.
 */

function set(array) {
    var arr = array;
    this.data = [];
    //在进行处理之前，先进行数组的去重
    this.data = set.unique(array);
}

//数组的唯一性
set.unique = function (arr) {
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
        if (newArr.indexOf(arr[i]) == -1) {
            newArr.push(arr[i]);
        }
    }
    return newArr;
}

//求数组的交集
//方法一
set.prototype.inter = function (arr) {
    var result = [];
    var arr1 = this.data;
    var arr2 = arr;
    for (var i = 0; i < arr1.length; i++) {
        for (var j = 0; j < arr2.length; j++) {
            if (arr1[i] == arr2[j]) {
                result.push(arr1[i])
            }
        }
    }
    return result;
}
//求数组的交集
//方法二
set.prototype.inter = function (arr) {
    var result = [];
    //要对比的数组分别是
    var arr1 = this.data;
    var arr2 = arr;
    arr1.forEach(function(ele){
        //indexof()方法可以返回某个指定的字符串值在字符串中首次出现在的位置
        //如果没有找到匹配的字符串返回-1
        if(arr2.indexOf(ele) >-1){
            result.push(ele);
        }
    })
    return result;
}
//求数组的差集
//方法一
set.prototype.anther = function (arr) {
    var arr1 = this.data;
    var arr2 = arr;
    var result = [];
    for (var i = 0; i < arr1.length; i++) {
        if (arr2.indexOf(arr1[i]) == -1) {
            result.push(arr1[i]);
        }
    }
    for (var i = 0; i < arr2.length; i++) {
        if (arr1.indexOf(arr2[i]) == -1) {
            result.push(arr2[i]);
        }
    }
    return result;
};
//求数组的差集
//方法二
set.prototype.difference = function (arr) {
    var arr1 = this.data;
    var arr2 = arr;
    var result = [];
    arr1.forEach(function (ele) {
        if (arr2.indexOf(ele) == -1) {
            result.push(ele);
        }
    });
    arr2.forEach(function (ele) {
        if (arr1.indexOf(ele) == -1) {
            result.push(ele);
        }
    });
    return result;
};


module.exports = set;